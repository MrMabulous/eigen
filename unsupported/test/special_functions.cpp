// This file is part of Eigen, a lightweight C++ template library
// for linear algebra.
//
// Copyright (C) 2016 Gael Guennebaud <gael.guennebaud@inria.fr>
//
// This Source Code Form is subject to the terms of the Mozilla
// Public License v. 2.0. If a copy of the MPL was not distributed
// with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "main.h"
#include "../Eigen/SpecialFunctions"

template<typename X, typename Y>
void verify_component_wise(const X& x, const Y& y)
{
  for(Index i=0; i<x.size(); ++i)
  {
    if((numext::isfinite)(y(i)))
      VERIFY_IS_APPROX( x(i), y(i) );
    else if((numext::isnan)(y(i)))
      VERIFY((numext::isnan)(x(i)));
    else
      VERIFY_IS_EQUAL( x(i), y(i) );
  }
}

template<typename ArrayType> void array_special_functions()
{
  using std::abs;
  using std::sqrt;
  typedef typename ArrayType::Scalar Scalar;
  typedef typename NumTraits<Scalar>::Real RealScalar;

  Scalar plusinf = std::numeric_limits<Scalar>::infinity();
  Scalar nan = std::numeric_limits<Scalar>::quiet_NaN();

  Index rows = internal::random<Index>(1,30);
  Index cols = 1;

  // API
  {
    ArrayType m1 = ArrayType::Random(rows,cols);
#if EIGEN_HAS_C99_MATH
    VERIFY_IS_APPROX(m1.lgamma(), lgamma(m1));
    VERIFY_IS_APPROX(m1.digamma(), digamma(m1));
    VERIFY_IS_APPROX(m1.erf(), erf(m1));
    VERIFY_IS_APPROX(m1.erfc(), erfc(m1));
#endif  // EIGEN_HAS_C99_MATH
  }


#if EIGEN_HAS_C99_MATH
  // check special functions (comparing against numpy implementation)
  if (!NumTraits<Scalar>::IsComplex)
  {

    {
      ArrayType m1 = ArrayType::Random(rows,cols);
      ArrayType m2 = ArrayType::Random(rows,cols);

      // Test various propreties of igamma & igammac.  These are normalized
      // gamma integrals where
      //   igammac(a, x) = Gamma(a, x) / Gamma(a)
      //   igamma(a, x) = gamma(a, x) / Gamma(a)
      // where Gamma and gamma are considered the standard unnormalized
      // upper and lower incomplete gamma functions, respectively.
      ArrayType a = m1.abs() + 2;
      ArrayType x = m2.abs() + 2;
      ArrayType zero = ArrayType::Zero(rows, cols);
      ArrayType one = ArrayType::Constant(rows, cols, Scalar(1.0));
      ArrayType a_m1 = a - one;
      ArrayType Gamma_a_x = Eigen::igammac(a, x) * a.lgamma().exp();
      ArrayType Gamma_a_m1_x = Eigen::igammac(a_m1, x) * a_m1.lgamma().exp();
      ArrayType gamma_a_x = Eigen::igamma(a, x) * a.lgamma().exp();
      ArrayType gamma_a_m1_x = Eigen::igamma(a_m1, x) * a_m1.lgamma().exp();

      // Gamma(a, 0) == Gamma(a)
      VERIFY_IS_APPROX(Eigen::igammac(a, zero), one);

      // Gamma(a, x) + gamma(a, x) == Gamma(a)
      VERIFY_IS_APPROX(Gamma_a_x + gamma_a_x, a.lgamma().exp());

      // Gamma(a, x) == (a - 1) * Gamma(a-1, x) + x^(a-1) * exp(-x)
      VERIFY_IS_APPROX(Gamma_a_x, (a - 1) * Gamma_a_m1_x + x.pow(a-1) * (-x).exp());

      // gamma(a, x) == (a - 1) * gamma(a-1, x) - x^(a-1) * exp(-x)
      VERIFY_IS_APPROX(gamma_a_x, (a - 1) * gamma_a_m1_x - x.pow(a-1) * (-x).exp());
    }

    {
      // Check exact values of igamma and igammac against a third party calculation.
      Scalar a_s[] = {Scalar(0), Scalar(1), Scalar(1.5), Scalar(4), Scalar(0.0001), Scalar(1000.5)};
      Scalar x_s[] = {Scalar(0), Scalar(1), Scalar(1.5), Scalar(4), Scalar(0.0001), Scalar(1000.5)};

      // location i*6+j corresponds to a_s[i], x_s[j].
      Scalar igamma_s[][6] = {{0.0, nan, nan, nan, nan, nan},
                              {0.0, 0.6321205588285578, 0.7768698398515702,
                              0.9816843611112658, 9.999500016666262e-05, 1.0},
                              {0.0, 0.4275932955291202, 0.608374823728911,
                              0.9539882943107686, 7.522076445089201e-07, 1.0},
                              {0.0, 0.01898815687615381, 0.06564245437845008,
                              0.5665298796332909, 4.166333347221828e-18, 1.0},
                              {0.0, 0.9999780593618628, 0.9999899967080838,
                              0.9999996219837988, 0.9991370418689945, 1.0},
                              {0.0, 0.0, 0.0, 0.0, 0.0, 0.5042041932513908}};
      Scalar igammac_s[][6] = {{nan, nan, nan, nan, nan, nan},
                              {1.0, 0.36787944117144233, 0.22313016014842982,
                                0.018315638888734182, 0.9999000049998333, 0.0},
                              {1.0, 0.5724067044708798, 0.3916251762710878,
                                0.04601170568923136, 0.9999992477923555, 0.0},
                              {1.0, 0.9810118431238462, 0.9343575456215499,
                                0.4334701203667089, 1.0, 0.0},
                              {1.0, 2.1940638138146658e-05, 1.0003291916285e-05,
                                3.7801620118431334e-07, 0.0008629581310054535,
                                0.0},
                              {1.0, 1.0, 1.0, 1.0, 1.0, 0.49579580674813944}};
      for (int i = 0; i < 6; ++i) {
        for (int j = 0; j < 6; ++j) {
          if ((std::isnan)(igamma_s[i][j])) {
            VERIFY((std::isnan)(numext::igamma(a_s[i], x_s[j])));
          } else {
            VERIFY_IS_APPROX(numext::igamma(a_s[i], x_s[j]), igamma_s[i][j]);
          }

          if ((std::isnan)(igammac_s[i][j])) {
            VERIFY((std::isnan)(numext::igammac(a_s[i], x_s[j])));
          } else {
            VERIFY_IS_APPROX(numext::igammac(a_s[i], x_s[j]), igammac_s[i][j]);
          }
        }
      }
    }
  }
#endif  // EIGEN_HAS_C99_MATH

  // Check the ndtri function against scipy.special.ndtri
  {
    ArrayType x(7), res(7), ref(7);
    x << 0.5, 0.2, 0.8, 0.9, 0.1, 0.99, 0.01;
    ref << 0., -0.8416212335729142, 0.8416212335729142, 1.2815515655446004, -1.2815515655446004, 2.3263478740408408, -2.3263478740408408;
    CALL_SUBTEST( verify_component_wise(ref, ref); );
    CALL_SUBTEST( res = x.ndtri(); verify_component_wise(res, ref); );
    CALL_SUBTEST( res = ndtri(x); verify_component_wise(res, ref); );

    // ndtri(normal_cdf(x)) ~= x
    CALL_SUBTEST(
        ArrayType m1 = ArrayType::Random(32);
        using std::sqrt;

        ArrayType cdf_val = (m1 / sqrt(2.)).erf();
        cdf_val = (cdf_val + 1.) / 2.;
        verify_component_wise(cdf_val.ndtri(), m1););

  }

  // Check the zeta function against scipy.special.zeta
  {
    ArrayType x(7), q(7), res(7), ref(7);
    x << 1.5,   4, 10.5, 10000.5,    3, 1,        0.9;
    q << 2,   1.5,    3,  1.0001, -2.5, 1.2345, 1.2345;
    ref << 1.61237534869, 0.234848505667, 1.03086757337e-5, 0.367879440865, 0.054102025820864097, plusinf, nan;
    CALL_SUBTEST( verify_component_wise(ref, ref); );
    CALL_SUBTEST( res = x.zeta(q); verify_component_wise(res, ref); );
    CALL_SUBTEST( res = zeta(x,q); verify_component_wise(res, ref); );
  }

  // digamma
  {
    ArrayType x(7), res(7), ref(7);
    x << 1, 1.5, 4, -10.5, 10000.5, 0, -1;
    ref << -0.5772156649015329, 0.03648997397857645, 1.2561176684318, 2.398239129535781, 9.210340372392849, plusinf, plusinf;
    CALL_SUBTEST( verify_component_wise(ref, ref); );

    CALL_SUBTEST( res = x.digamma(); verify_component_wise(res, ref); );
    CALL_SUBTEST( res = digamma(x);  verify_component_wise(res, ref); );
  }


#if EIGEN_HAS_C99_MATH
  {
    ArrayType n(11), x(11), res(11), ref(11);
    n << 1, 1,    1, 1.5,   17,   31,   28,    8, 42, 147, 170;
    x << 2, 3, 25.5, 1.5,  4.7, 11.8, 17.7, 30.2, 15.8, 54.1, 64;
    ref << 0.644934066848, 0.394934066848, 0.0399946696496, nan, 293.334565435, 0.445487887616, -2.47810300902e-07, -8.29668781082e-09, -0.434562276666, 0.567742190178, -0.0108615497927;
    CALL_SUBTEST( verify_component_wise(ref, ref); );

    if(sizeof(RealScalar)>=8) {  // double
      // Reason for commented line: http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1232
      //       CALL_SUBTEST( res = x.polygamma(n); verify_component_wise(res, ref); );
      CALL_SUBTEST( res = polygamma(n,x);  verify_component_wise(res, ref); );
    }
    else {
      //       CALL_SUBTEST( res = x.polygamma(n); verify_component_wise(res.head(8), ref.head(8)); );
      CALL_SUBTEST( res = polygamma(n,x); verify_component_wise(res.head(8), ref.head(8)); );
    }
  }
#endif

#if EIGEN_HAS_C99_MATH
  {
    // Inputs and ground truth generated with scipy via:
    //   a = np.logspace(-3, 3, 5) - 1e-3
    //   b = np.logspace(-3, 3, 5) - 1e-3
    //   x = np.linspace(-0.1, 1.1, 5)
    //   (full_a, full_b, full_x) = np.vectorize(lambda a, b, x: (a, b, x))(*np.ix_(a, b, x))
    //   full_a = full_a.flatten().tolist()  # same for full_b, full_x
    //   v = scipy.special.betainc(full_a, full_b, full_x).flatten().tolist()
    //
    // Note in Eigen, we call betainc with arguments in the order (x, a, b).
    ArrayType a(125);
    ArrayType b(125);
    ArrayType x(125);
    ArrayType v(125);
    ArrayType res(125);

    a << 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999,
        0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999,
        0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 999.999, 999.999, 999.999, 999.999, 999.999, 999.999,
        999.999, 999.999, 999.999, 999.999, 999.999, 999.999, 999.999, 999.999,
        999.999, 999.999, 999.999, 999.999, 999.999, 999.999, 999.999, 999.999,
        999.999, 999.999, 999.999;

    b << 0.0, 0.0, 0.0, 0.0, 0.0, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379, 0.999,
        0.999, 0.999, 0.999, 0.999, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 31.62177660168379, 999.999,
        999.999, 999.999, 999.999, 999.999, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.999, 0.999, 0.999, 0.999,
        0.999, 31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 999.999, 999.999, 999.999,
        999.999, 999.999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.999, 0.999, 0.999, 0.999, 0.999,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 999.999, 999.999, 999.999,
        999.999, 999.999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.999, 0.999, 0.999, 0.999, 0.999,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 999.999, 999.999, 999.999,
        999.999, 999.999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03062277660168379,
        0.03062277660168379, 0.03062277660168379, 0.03062277660168379,
        0.03062277660168379, 0.999, 0.999, 0.999, 0.999, 0.999,
        31.62177660168379, 31.62177660168379, 31.62177660168379,
        31.62177660168379, 31.62177660168379, 999.999, 999.999, 999.999,
        999.999, 999.999;

    x << -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5,
        0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2,
        0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1,
        0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1,
        -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8,
        1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5,
        0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2,
        0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1,
        0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5, 0.8, 1.1, -0.1, 0.2, 0.5,
        0.8, 1.1;

    v << nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
        nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,
        nan, nan, nan, 0.47972119876364683, 0.5, 0.5202788012363533, nan, nan,
        0.9518683957740043, 0.9789663010413743, 0.9931729188073435, nan, nan,
        0.999995949033062, 0.9999999999993698, 0.9999999999999999, nan, nan,
        0.9999999999999999, 0.9999999999999999, 0.9999999999999999, nan, nan,
        nan, nan, nan, nan, nan, 0.006827081192655869, 0.0210336989586256,
        0.04813160422599567, nan, nan, 0.20014344256217678, 0.5000000000000001,
        0.7998565574378232, nan, nan, 0.9991401428435834, 0.999999999698403,
        0.9999999999999999, nan, nan, 0.9999999999999999, 0.9999999999999999,
        0.9999999999999999, nan, nan, nan, nan, nan, nan, nan,
        1.0646600232370887e-25, 6.301722877826246e-13, 4.050966937974938e-06,
        nan, nan, 7.864342668429763e-23, 3.015969667594166e-10,
        0.0008598571564165444, nan, nan, 6.031987710123844e-08,
        0.5000000000000007, 0.9999999396801229, nan, nan, 0.9999999999999999,
        0.9999999999999999, 0.9999999999999999, nan, nan, nan, nan, nan, nan,
        nan, 0.0, 7.029920380986636e-306, 2.2450728208591345e-101, nan, nan,
        0.0, 9.275871147869727e-302, 1.2232913026152827e-97, nan, nan, 0.0,
        3.0891393081932924e-252, 2.9303043666183996e-60, nan, nan,
        2.248913486879199e-196, 0.5000000000004947, 0.9999999999999999, nan;

    CALL_SUBTEST(res = betainc(a, b, x);
                 verify_component_wise(res, v););
  }

  // Test various properties of betainc
  {
    ArrayType m1 = ArrayType::Random(32);
    ArrayType m2 = ArrayType::Random(32);
    ArrayType m3 = ArrayType::Random(32);
    ArrayType one = ArrayType::Constant(32, Scalar(1.0));
    const Scalar eps = std::numeric_limits<Scalar>::epsilon();
    ArrayType a = (m1 * 4.0).exp();
    ArrayType b = (m2 * 4.0).exp();
    ArrayType x = m3.abs();

    // betainc(a, 1, x) == x**a
    CALL_SUBTEST(
        ArrayType test = betainc(a, one, x);
        ArrayType expected = x.pow(a);
        verify_component_wise(test, expected););

    // betainc(1, b, x) == 1 - (1 - x)**b
    CALL_SUBTEST(
        ArrayType test = betainc(one, b, x);
        ArrayType expected = one - (one - x).pow(b);
        verify_component_wise(test, expected););

    // betainc(a, b, x) == 1 - betainc(b, a, 1-x)
    CALL_SUBTEST(
        ArrayType test = betainc(a, b, x) + betainc(b, a, one - x);
        ArrayType expected = one;
        verify_component_wise(test, expected););

    // betainc(a+1, b, x) = betainc(a, b, x) - x**a * (1 - x)**b / (a * beta(a, b))
    CALL_SUBTEST(
        ArrayType num = x.pow(a) * (one - x).pow(b);
        ArrayType denom = a * (a.lgamma() + b.lgamma() - (a + b).lgamma()).exp();
        // Add eps to rhs and lhs so that component-wise test doesn't result in
        // nans when both outputs are zeros.
        ArrayType expected = betainc(a, b, x) - num / denom + eps;
        ArrayType test = betainc(a + one, b, x) + eps;
        if (sizeof(Scalar) >= 8) { // double
          verify_component_wise(test, expected);
        } else {
          // Reason for limited test: http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1232
          verify_component_wise(test.head(8), expected.head(8));
        });

    // betainc(a, b+1, x) = betainc(a, b, x) + x**a * (1 - x)**b / (b * beta(a, b))
    CALL_SUBTEST(
        // Add eps to rhs and lhs so that component-wise test doesn't result in
        // nans when both outputs are zeros.
        ArrayType num = x.pow(a) * (one - x).pow(b);
        ArrayType denom = b * (a.lgamma() + b.lgamma() - (a + b).lgamma()).exp();
        ArrayType expected = betainc(a, b, x) + num / denom + eps;
        ArrayType test = betainc(a, b + one, x) + eps;
        verify_component_wise(test, expected););
  }
#endif  // EIGEN_HAS_C99_MATH

    /* Code to generate the data for the following two test cases.
    N = 5
    np.random.seed(3)

    a = np.logspace(-2, 3, 6)
    a = np.ravel(np.tile(np.reshape(a, [-1, 1]), [1, N]))
    x = np.random.gamma(a, 1.0)
    x = np.maximum(x, np.finfo(np.float32).tiny)

    def igamma(a, x):
      return mpmath.gammainc(a, 0, x, regularized=True)

    def igamma_der_a(a, x):
      res = mpmath.diff(lambda a_prime: igamma(a_prime, x), a)
      return np.float64(res)

    def gamma_sample_der_alpha(a, x):
      igamma_x = igamma(a, x)
      def igammainv_of_igamma(a_prime):
        return mpmath.findroot(lambda x_prime: igamma(a_prime, x_prime) -
            igamma_x, x, solver='newton')
      return np.float64(mpmath.diff(igammainv_of_igamma, a))

    v_igamma_der_a = np.vectorize(igamma_der_a)(a, x)
    v_gamma_sample_der_alpha = np.vectorize(gamma_sample_der_alpha)(a, x)
  */

#if EIGEN_HAS_C99_MATH
  // Test igamma_der_a
  {
    ArrayType a(30);
    ArrayType x(30);
    ArrayType res(30);
    ArrayType v(30);

    a << 0.01, 0.01, 0.01, 0.01, 0.01, 0.1, 0.1, 0.1, 0.1, 0.1, 1.0, 1.0, 1.0,
        1.0, 1.0, 10.0, 10.0, 10.0, 10.0, 10.0, 100.0, 100.0, 100.0, 100.0,
        100.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0;

    x << 1.25668890405e-26, 1.17549435082e-38, 1.20938905072e-05,
        1.17549435082e-38, 1.17549435082e-38, 5.66572070696e-16,
        0.0132865061065, 0.0200034203853, 6.29263709118e-17, 1.37160367764e-06,
        0.333412038288, 1.18135687766, 0.580629033777, 0.170631439426,
        0.786686768458, 7.63873279537, 13.1944344379, 11.896042354,
        10.5830172417, 10.5020942233, 92.8918587747, 95.003720371,
        86.3715926467, 96.0330217672, 82.6389930677, 968.702906754,
        969.463546828, 1001.79726022, 955.047416547, 1044.27458568;

    v << -32.7256441441, -36.4394150514, -9.66467612263, -36.4394150514,
        -36.4394150514, -1.0891900302, -2.66351229645, -2.48666868596,
        -0.929700494428, -3.56327722764, -0.455320135314, -0.391437214323,
        -0.491352055991, -0.350454834292, -0.471773162921, -0.104084440522,
        -0.0723646747909, -0.0992828975532, -0.121638215446, -0.122619605294,
        -0.0317670267286, -0.0359974812869, -0.0154359225363, -0.0375775365921,
        -0.00794899153653, -0.00777303219211, -0.00796085782042,
        -0.0125850719397, -0.00455500206958, -0.00476436993148;

    CALL_SUBTEST(res = igamma_der_a(a, x); verify_component_wise(res, v););
  }

  // Test gamma_sample_der_alpha
  {
    ArrayType alpha(30);
    ArrayType sample(30);
    ArrayType res(30);
    ArrayType v(30);

    alpha << 0.01, 0.01, 0.01, 0.01, 0.01, 0.1, 0.1, 0.1, 0.1, 0.1, 1.0, 1.0,
        1.0, 1.0, 1.0, 10.0, 10.0, 10.0, 10.0, 10.0, 100.0, 100.0, 100.0, 100.0,
        100.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0;

    sample << 1.25668890405e-26, 1.17549435082e-38, 1.20938905072e-05,
        1.17549435082e-38, 1.17549435082e-38, 5.66572070696e-16,
        0.0132865061065, 0.0200034203853, 6.29263709118e-17, 1.37160367764e-06,
        0.333412038288, 1.18135687766, 0.580629033777, 0.170631439426,
        0.786686768458, 7.63873279537, 13.1944344379, 11.896042354,
        10.5830172417, 10.5020942233, 92.8918587747, 95.003720371,
        86.3715926467, 96.0330217672, 82.6389930677, 968.702906754,
        969.463546828, 1001.79726022, 955.047416547, 1044.27458568;

    v << 7.42424742367e-23, 1.02004297287e-34, 0.0130155240738,
        1.02004297287e-34, 1.02004297287e-34, 1.96505168277e-13, 0.525575786243,
        0.713903991771, 2.32077561808e-14, 0.000179348049886, 0.635500453302,
        1.27561284917, 0.878125852156, 0.41565819538, 1.03606488534,
        0.885964824887, 1.16424049334, 1.10764479598, 1.04590810812,
        1.04193666963, 0.965193152414, 0.976217589464, 0.93008035061,
        0.98153216096, 0.909196397698, 0.98434963993, 0.984738050206,
        1.00106492525, 0.97734200649, 1.02198794179;

    CALL_SUBTEST(res = gamma_sample_der_alpha(alpha, sample);
                 verify_component_wise(res, v););
  }

  // Check the dawsn function against scipy.special.dawsn
  {
    ArrayType x(60);
    ArrayType v(60);
    ArrayType res(60);

    x << -30.        , -28.98305085, -27.96610169, -26.94915254,
       -25.93220339, -24.91525424, -23.89830508, -22.88135593,
       -21.86440678, -20.84745763, -19.83050847, -18.81355932,
       -17.79661017, -16.77966102, -15.76271186, -14.74576271,
       -13.72881356, -12.71186441, -11.69491525, -10.6779661 ,
        -9.66101695,  -8.6440678 ,  -7.62711864,  -6.61016949,
        -5.59322034,  -4.57627119,  -3.55932203,  -2.54237288,
        -1.52542373,  -0.50847458,   0.50847458,   1.52542373,
         2.54237288,   3.55932203,   4.57627119,   5.59322034,
         6.61016949,   7.62711864,   8.6440678 ,   9.66101695,
        10.6779661 ,  11.69491525,  12.71186441,  13.72881356,
        14.74576271,  15.76271186,  16.77966102,  17.79661017,
        18.81355932,  19.83050847,  20.84745763,  21.86440678,
        22.88135593,  23.89830508,  24.91525424,  25.93220339,
        26.94915254,  27.96610169,  28.98305085,  30.;
    v << -0.01667594, -0.01726175, -0.01789024, -0.01856626, -0.01929541,
      -0.02008423, -0.02094035, -0.02187278, -0.02289221, -0.02401143,
      -0.02524586, -0.02661428, -0.0281398 , -0.02985118, -0.03178465,
      -0.03398656, -0.03651715, -0.03945619, -0.04291167, -0.0470335 ,
      -0.05203622, -0.05823825, -0.0661342 , -0.07653816, -0.09089738,
      -0.11208184, -0.14686808, -0.21830822, -0.42101208, -0.4292628 ,
       0.4292628 ,  0.42101208,  0.21830822,  0.14686808,  0.11208184,
       0.09089738,  0.07653816,  0.0661342 ,  0.05823825,  0.05203622,
       0.0470335 ,  0.04291167,  0.03945619,  0.03651715,  0.03398656,
       0.03178465,  0.02985118,  0.0281398 ,  0.02661428,  0.02524586,
       0.02401143,  0.02289221,  0.02187278,  0.02094035,  0.02008423,
       0.01929541,  0.01856626,  0.01789024,  0.01726175,  0.01667594;
    CALL_SUBTEST(res = x.dawsn();
                 verify_component_wise(res, v););
    CALL_SUBTEST(res = dawsn(x);
                 verify_component_wise(res, v););
  }

  // Check the expi function against scipy.special.expi
  {
    ArrayType x1(10);
    ArrayType x2(83);
    ArrayType v1(10);
    ArrayType v2(83);
    ArrayType res1(10);
    ArrayType res2(83);

    x1 << -10., -9., -8., -7., -6., -5., -4., -3., -2., -1.;
    v1 << nan, nan, nan, nan, nan, nan, nan, nan, nan, nan;

    CALL_SUBTEST(res1 = x1.expi();
                 verify_component_wise(res1, v1););
    CALL_SUBTEST(res1 = expi(x1);
                 verify_component_wise(res1, v1););


    x2 <<  0.        ,   1.07563025,   2.1512605 ,   3.22689076,
         4.30252101,   5.37815126,   6.45378151,   7.52941176,
         8.60504202,   9.68067227,  10.75630252,  11.83193277,
        12.90756303,  13.98319328,  15.05882353,  16.13445378,
        17.21008403,  18.28571429,  19.36134454,  20.43697479,
        21.51260504,  22.58823529,  23.66386555,  24.7394958 ,
        25.81512605,  26.8907563 ,  27.96638655,  29.04201681,
        30.11764706,  31.19327731,  32.26890756,  33.34453782,
        34.42016807,  35.49579832,  36.57142857,  37.64705882,
        38.72268908,  39.79831933,  40.87394958,  41.94957983,
        43.02521008,  44.10084034,  45.17647059,  46.25210084,
        47.32773109,  48.40336134,  49.4789916 ,  50.55462185,
        51.6302521 ,  52.70588235,  53.78151261,  54.85714286,
        55.93277311,  57.00840336,  58.08403361,  59.15966387,
        60.23529412,  61.31092437,  62.38655462,  63.46218487,
        64.53781513,  65.61344538,  66.68907563,  67.76470588,
        68.84033613,  69.91596639,  70.99159664,  72.06722689,
        73.14285714,  74.21848739,  75.29411765,  76.3697479 ,
        77.44537815,  78.5210084 ,  79.59663866,  80.67226891,
        81.74789916,  82.82352941,  83.89915966,  84.97478992,
        86.05042017,  87.12605042,  88.20168067;

    v2 <<   -plusinf, 2.10089121e+00, 5.53528985e+00, 1.15753783e+01,
       2.42706304e+01, 5.33055760e+01, 1.23108954e+02, 2.96569919e+02,
       7.37905242e+02, 1.88081172e+03, 4.88150242e+03, 1.28468967e+04,
       3.41823396e+04, 9.17600177e+04, 2.48134005e+05, 6.75145588e+05,
       1.84670692e+06, 5.07434607e+06, 1.39989488e+07, 3.87561319e+07,
       1.07633111e+08, 2.99757166e+08, 8.36932884e+08, 2.34210043e+09,
       6.56787329e+09, 1.84531523e+10, 5.19367514e+10, 1.46412247e+11,
       4.13357022e+11, 1.16861448e+12, 3.30805712e+12, 9.37546109e+12,
       2.66008817e+13, 7.55531072e+13, 2.14799634e+14, 6.11243402e+14,
       1.74088881e+15, 4.96229772e+15, 1.41556570e+16, 4.04105470e+16,
       1.15441080e+17, 3.29998307e+17, 9.43918678e+17, 2.70156782e+18,
       7.73648003e+18, 2.21669450e+19, 6.35466415e+19, 1.82261026e+20,
       5.22998247e+20, 1.50142352e+21, 4.31215780e+21, 1.23898742e+22,
       3.56133479e+22, 1.02406049e+23, 2.94577085e+23, 8.47670055e+23,
       2.44007728e+24, 7.02625342e+24, 2.02386922e+25, 5.83142468e+25,
       1.68072212e+26, 4.84553619e+26, 1.39736005e+27, 4.03080178e+27,
       1.16302074e+28, 3.35654768e+28, 9.68956171e+28, 2.79780963e+29,
       8.08038054e+29, 2.33422190e+30, 6.74444651e+30, 1.94913373e+31,
       5.63411260e+31, 1.62890401e+32, 4.71030651e+32, 1.36233614e+33,
       3.94092917e+33, 1.14022387e+34, 3.29956549e+34, 9.54985039e+34,
       2.76444343e+35, 8.00365528e+35, 2.31759127e+36;

    CALL_SUBTEST(res2 = x2.expi();
                 verify_component_wise(res2, v2););
    CALL_SUBTEST(res2 = expi(x2);
                 verify_component_wise(res2, v2););

  }

  // Check the fresnel_cos function against scipy.special.fresnel_cos
  {
    ArrayType x(120);
    ArrayType v(120);
    ArrayType res(120);

    x << 0.        ,   0.84033613,   1.68067227,   2.5210084 ,
         3.36134454,   4.20168067,   5.04201681,   5.88235294,
         6.72268908,   7.56302521,   8.40336134,   9.24369748,
        10.08403361,  10.92436975,  11.76470588,  12.60504202,
        13.44537815,  14.28571429,  15.12605042,  15.96638655,
        16.80672269,  17.64705882,  18.48739496,  19.32773109,
        20.16806723,  21.00840336,  21.8487395 ,  22.68907563,
        23.52941176,  24.3697479 ,  25.21008403,  26.05042017,
        26.8907563 ,  27.73109244,  28.57142857,  29.41176471,
        30.25210084,  31.09243697,  31.93277311,  32.77310924,
        33.61344538,  34.45378151,  35.29411765,  36.13445378,
        36.97478992,  37.81512605,  38.65546218,  39.49579832,
        40.33613445,  41.17647059,  42.01680672,  42.85714286,
        43.69747899,  44.53781513,  45.37815126,  46.21848739,
        47.05882353,  47.89915966,  48.7394958 ,  49.57983193,
        50.42016807,  51.2605042 ,  52.10084034,  52.94117647,
        53.78151261,  54.62184874,  55.46218487,  56.30252101,
        57.14285714,  57.98319328,  58.82352941,  59.66386555,
        60.50420168,  61.34453782,  62.18487395,  63.02521008,
        63.86554622,  64.70588235,  65.54621849,  66.38655462,
        67.22689076,  68.06722689,  68.90756303,  69.74789916,
        70.58823529,  71.42857143,  72.26890756,  73.1092437 ,
        73.94957983,  74.78991597,  75.6302521 ,  76.47058824,
        77.31092437,  78.1512605 ,  78.99159664,  79.83193277,
        80.67226891,  81.51260504,  82.35294118,  83.19327731,
        84.03361345,  84.87394958,  85.71428571,  86.55462185,
        87.39495798,  88.23529412,  89.07563025,  89.91596639,
        90.75630252,  91.59663866,  92.43697479,  93.27731092,
        94.11764706,  94.95798319,  95.79831933,  96.63865546,
        97.4789916 ,  98.31932773,  99.15966387, 100.;

    v << 0.        , 0.74266522, 0.32812213, 0.43875588, 0.41453588,
       0.54029029, 0.55022786, 0.45642045, 0.54524838, 0.54010938,
       0.46888788, 0.5264084 , 0.51495646, 0.47492414, 0.48386262,
       0.47515281, 0.52223741, 0.50281483, 0.51997787, 0.4802031 ,
       0.48735932, 0.4857135 , 0.50575129, 0.51048487, 0.48541441,
       0.51288696, 0.51221434, 0.48670058, 0.50737654, 0.50236137,
       0.49177003, 0.48984997, 0.48834718, 0.51147597, 0.50546322,
       0.51078691, 0.48994025, 0.49060812, 0.49549969, 0.49883568,
       0.50201447, 0.49080629, 0.50441198, 0.50401653, 0.49158384,
       0.5002166 , 0.49691317, 0.49896422, 0.4921087 , 0.49454764,
       0.5060444 , 0.50679103, 0.50539112, 0.49595384, 0.4932533 ,
       0.50159178, 0.49497724, 0.49671284, 0.49566851, 0.49840677,
       0.49811273, 0.49666623, 0.49569701, 0.49438201, 0.50385107,
       0.49618958, 0.5004852 , 0.50023254, 0.50493898, 0.49956376,
       0.50173312, 0.49816757, 0.50488652, 0.49495883, 0.49489211,
       0.5013866 , 0.49524103, 0.4952145 , 0.50225019, 0.49538438,
       0.49642285, 0.50455173, 0.50178249, 0.50426757, 0.49598558,
       0.49971476, 0.49582196, 0.50434592, 0.50323022, 0.50285698,
       0.49957101, 0.49841209, 0.50411503, 0.49770791, 0.49801616,
       0.50389467, 0.50009259, 0.50179876, 0.49995817, 0.50375684,
       0.50198849, 0.49773544, 0.49630356, 0.49834349, 0.50069004,
       0.50267925, 0.49760382, 0.5034784 , 0.50314093, 0.50030427,
       0.50276759, 0.50292828, 0.49930655, 0.50335069, 0.50291682,
       0.49670977, 0.49921886, 0.49713836, 0.50270743, 0.4999999;


    CALL_SUBTEST(res = x.fresnel_cos();
                 verify_component_wise(res, v););
    CALL_SUBTEST(res = fresnel_cos(x);
                 verify_component_wise(res, v););
  }

  // Check the fresnel_sin function against scipy.special.fresnel_sin
  {
    ArrayType x(120);
    ArrayType v(120);
    ArrayType res(120);

    x << 0.        ,   0.84033613,   1.68067227,   2.5210084 ,
         3.36134454,   4.20168067,   5.04201681,   5.88235294,
         6.72268908,   7.56302521,   8.40336134,   9.24369748,
        10.08403361,  10.92436975,  11.76470588,  12.60504202,
        13.44537815,  14.28571429,  15.12605042,  15.96638655,
        16.80672269,  17.64705882,  18.48739496,  19.32773109,
        20.16806723,  21.00840336,  21.8487395 ,  22.68907563,
        23.52941176,  24.3697479 ,  25.21008403,  26.05042017,
        26.8907563 ,  27.73109244,  28.57142857,  29.41176471,
        30.25210084,  31.09243697,  31.93277311,  32.77310924,
        33.61344538,  34.45378151,  35.29411765,  36.13445378,
        36.97478992,  37.81512605,  38.65546218,  39.49579832,
        40.33613445,  41.17647059,  42.01680672,  42.85714286,
        43.69747899,  44.53781513,  45.37815126,  46.21848739,
        47.05882353,  47.89915966,  48.7394958 ,  49.57983193,
        50.42016807,  51.2605042 ,  52.10084034,  52.94117647,
        53.78151261,  54.62184874,  55.46218487,  56.30252101,
        57.14285714,  57.98319328,  58.82352941,  59.66386555,
        60.50420168,  61.34453782,  62.18487395,  63.02521008,
        63.86554622,  64.70588235,  65.54621849,  66.38655462,
        67.22689076,  68.06722689,  68.90756303,  69.74789916,
        70.58823529,  71.42857143,  72.26890756,  73.1092437 ,
        73.94957983,  74.78991597,  75.6302521 ,  76.47058824,
        77.31092437,  78.1512605 ,  78.99159664,  79.83193277,
        80.67226891,  81.51260504,  82.35294118,  83.19327731,
        84.03361345,  84.87394958,  85.71428571,  86.55462185,
        87.39495798,  88.23529412,  89.07563025,  89.91596639,
        90.75630252,  91.59663866,  92.43697479,  93.27731092,
        94.11764706,  94.95798319,  95.79831933,  96.63865546,
        97.4789916 ,  98.31932773,  99.15966387, 100.;

    v << 0.        , 0.28445073, 0.56803166, 0.60957677, 0.45964101,
       0.56408363, 0.5382052 , 0.53205885, 0.51392546, 0.51274102,
       0.52160323, 0.52209767, 0.5277966 , 0.48516185, 0.52171661,
       0.50450528, 0.49187834, 0.47789696, 0.49338769, 0.50235243,
       0.51410366, 0.48898874, 0.51622867, 0.51270028, 0.50602981,
       0.50796839, 0.50794099, 0.50446585, 0.51134009, 0.51284645,
       0.49042447, 0.50680298, 0.49791918, 0.50023842, 0.49029065,
       0.50087741, 0.49691587, 0.50407426, 0.49110558, 0.50964249,
       0.50925297, 0.49908881, 0.50786592, 0.50784007, 0.49818886,
       0.50841474, 0.50763407, 0.4920075 , 0.49995515, 0.49451998,
       0.50456702, 0.4969924 , 0.5048988 , 0.49410869, 0.49807991,
       0.49329941, 0.50453042, 0.50577548, 0.49511225, 0.50621932,
       0.50602445, 0.49476113, 0.50433707, 0.50214211, 0.49550569,
       0.49559084, 0.49428132, 0.50564878, 0.50257605, 0.50547233,
       0.49487378, 0.49498951, 0.49805076, 0.49877073, 0.50033348,
       0.49514355, 0.50148089, 0.50113966, 0.49569652, 0.49870148,
       0.49689792, 0.50107262, 0.49573839, 0.49838279, 0.50205403,
       0.5044472 , 0.50139418, 0.49973669, 0.49715506, 0.50315462,
       0.49581316, 0.49615226, 0.49986416, 0.49663316, 0.49649249,
       0.50085425, 0.49605537, 0.49653391, 0.50386497, 0.50072498,
       0.50322397, 0.49701049, 0.50035675, 0.49671664, 0.50357624,
       0.50241573, 0.50265105, 0.49934204, 0.49843933, 0.50346178,
       0.49795101, 0.49824773, 0.50331019, 0.50009766, 0.50159141,
       0.49984635, 0.50317061, 0.5015141 , 0.49827535, 0.4968169;


    CALL_SUBTEST(res = x.fresnel_sin();
                 verify_component_wise(res, v););
    CALL_SUBTEST(res = fresnel_sin(x);
                 verify_component_wise(res, v););
  }

  // Check the spence function against scipy.special.spence
  {
    ArrayType x1(10);
    ArrayType x2(120);
    ArrayType v1(10);
    ArrayType v2(120);
    ArrayType res1(10);
    ArrayType res2(120);

    x1 << -10., -9., -8., -7., -6., -5., -4., -3., -2., -1.;
    v1 << nan, nan, nan, nan, nan, nan, nan, nan, nan, nan;

    CALL_SUBTEST(res1 = x1.spence();
                 verify_component_wise(res1, v1););
    CALL_SUBTEST(res1 = spence(x1);
                 verify_component_wise(res1, v1););


    x2 <<   0.        ,   1.07563025,   2.1512605 ,   3.22689076,
         4.30252101,   5.37815126,   6.45378151,   7.52941176,
         8.60504202,   9.68067227,  10.75630252,  11.83193277,
        12.90756303,  13.98319328,  15.05882353,  16.13445378,
        17.21008403,  18.28571429,  19.36134454,  20.43697479,
        21.51260504,  22.58823529,  23.66386555,  24.7394958 ,
        25.81512605,  26.8907563 ,  27.96638655,  29.04201681,
        30.11764706,  31.19327731,  32.26890756,  33.34453782,
        34.42016807,  35.49579832,  36.57142857,  37.64705882,
        38.72268908,  39.79831933,  40.87394958,  41.94957983,
        43.02521008,  44.10084034,  45.17647059,  46.25210084,
        47.32773109,  48.40336134,  49.4789916 ,  50.55462185,
        51.6302521 ,  52.70588235,  53.78151261,  54.85714286,
        55.93277311,  57.00840336,  58.08403361,  59.15966387,
        60.23529412,  61.31092437,  62.38655462,  63.46218487,
        64.53781513,  65.61344538,  66.68907563,  67.76470588,
        68.84033613,  69.91596639,  70.99159664,  72.06722689,
        73.14285714,  74.21848739,  75.29411765,  76.3697479 ,
        77.44537815,  78.5210084 ,  79.59663866,  80.67226891,
        81.74789916,  82.82352941,  83.89915966,  84.97478992,
        86.05042017,  87.12605042,  88.20168067,  89.27731092,
        90.35294118,  91.42857143,  92.50420168,  93.57983193,
        94.65546218,  95.73109244,  96.80672269,  97.88235294,
        98.95798319, 100.03361345, 101.1092437 , 102.18487395,
       103.2605042 , 104.33613445, 105.41176471, 106.48739496,
       107.56302521, 108.63865546, 109.71428571, 110.78991597,
       111.86554622, 112.94117647, 114.01680672, 115.09243697,
       116.16806723, 117.24369748, 118.31932773, 119.39495798,
       120.47058824, 121.54621849, 122.62184874, 123.69747899,
       124.77310924, 125.8487395 , 126.92436975, 128.;

    v2 <<   1.64493407,  -0.07424638,  -0.92517856,  -1.55869701,
        -2.07605073,  -2.5186072 ,  -2.908091  ,  -3.25755955,
        -3.57556745,  -3.86806807,  -4.13939443,  -4.3928116 ,
        -4.63084902,  -4.85551113,  -5.06841659,  -5.27089367,
        -5.46404732,  -5.64880782,  -5.82596653,  -5.99620293,
        -6.16010524,  -6.31818641,  -6.47089677,  -6.61863403,
        -6.76175137,  -6.900564  ,  -7.03535452,  -7.16637741,
        -7.29386268,  -7.41801901,  -7.53903635,  -7.65708816,
        -7.7723333 ,  -7.88491766,  -7.99497556,  -8.10263099,
        -8.20799864,  -8.31118484,  -8.41228837,  -8.51140117,
        -8.608609  ,  -8.70399192,  -8.79762489,  -8.88957813,
        -8.97991756,  -9.06870512,  -9.15599912,  -9.24185452,
        -9.32632318,  -9.40945407,  -9.49129353,  -9.57188543,
        -9.65127137,  -9.7294908 ,  -9.8065812 ,  -9.8825782 ,
        -9.95751571, -10.03142601, -10.10433989, -10.17628671,
       -10.2472945 , -10.31739005, -10.38659896, -10.45494576,
       -10.5224539 , -10.58914586, -10.65504321, -10.72016663,
       -10.78453597, -10.84817031, -10.91108798, -10.97330659,
       -11.03484312, -11.0957139 , -11.15593464, -11.2155205 ,
       -11.2744861 , -11.33284553, -11.39061239, -11.44779982,
       -11.50442049, -11.56048667, -11.6160102 , -11.67100254,
       -11.72547479, -11.77943766, -11.83290156, -11.88587655,
       -11.93837237, -11.99039848, -12.04196404, -12.09307795,
       -12.14374883, -12.19398505, -12.24379474, -12.2931858 ,
       -12.34216589, -12.39074247, -12.43892277, -12.48671386,
       -12.53412257, -12.58115558, -12.62781937, -12.67412026,
       -12.72006439, -12.76565776, -12.81090619, -12.85581537,
       -12.90039084, -12.94463799, -12.98856211, -13.03216831,
       -13.07546161, -13.1184469 , -13.16112895, -13.20351241,
       -13.24560183, -13.28740166, -13.32891622, -13.37014976;

    CALL_SUBTEST(res2 = x2.spence();
                 verify_component_wise(res2, v2););
    CALL_SUBTEST(res2 = spence(x2);
                 verify_component_wise(res2, v2););

  }


#endif  // EIGEN_HAS_C99_MATH
}

EIGEN_DECLARE_TEST(special_functions)
{
  CALL_SUBTEST_1(array_special_functions<ArrayXf>());
  CALL_SUBTEST_2(array_special_functions<ArrayXd>());
}
